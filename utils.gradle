class TabbyTask extends DefaultTask {
    String baseName
    String extension = 'jar'
    def includes = [] as Set
    def excludes = [] as Set
    @TaskAction
    def build() {
        def self = this
        def jarTask = project.tasks.create(name: "jar" + self.name.capitalize(), dependsOn: project.classes, type: Jar) {
            if(self.baseName) baseName self.baseName
            if(self.extension) extension self.extension
            from({project.configurations.compile.collect { it.isDirectory() ? it : project.zipTree(it) }}) {
                include "com/swabunga/spell/**"
            }
            from(self.project.sourceSets.main.output) {
                exclude self.excludes
            }
            classifier 'release'
        }

        project.artifacts { archives jarTask }
        project.reobf { reobf(jarTask) { spec ->
            spec.classpath = project.sourceSets.main.compileClasspath
        } }
    }

    /**
     * Adds the includes's of each task to the excludes of all. Useful for mutual exclusion cases
     * @param tasks The tasks
     */
    static makeExclusive(TabbyTask... tasks) {
        def allIncludes = tasks.includes.flatten() as Set
        tasks.each { it.excludes += allIncludes - it.includes }
    }
}
ext.TabbyTask = TabbyTask
